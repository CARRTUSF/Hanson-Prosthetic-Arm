// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 1

#include <PrismSceneManager.h>
#include <scenes.h>
#include <NewScene/NewScene.h>

namespace scenes {

  namespace NewScene {

    namespace externalNodes {
      extern const std::string InitialTarget = "InitialTarget";
      extern const std::string FinalTarget = "FinalTarget";
      extern const std::string Distance = "Distance";
      extern const std::string Laser = "Laser";
      extern const std::string TargetingModel = "TargetingModel";
    }

    const SceneDescriptor::ExternalNodeReferences externalNodesMap = {
      {"InitialTarget", externalNodes::InitialTarget},
      {"FinalTarget", externalNodes::FinalTarget},
      {"Distance", externalNodes::Distance},
      {"Laser", externalNodes::Laser},
      {"TargetingModel", externalNodes::TargetingModel}
    };

    const SceneDescriptor descriptor(
      0,
      "NewScene",
      "root",
      "/assets/scenes/NewScene.scene.xml",
      "/assets/scenes/NewScene.scene.res.xml",
      externalNodesMap,
      true);
  }

  const SceneDescriptorReferences externalScenes = {
    {NewScene::descriptor.getExternalName(), NewScene::descriptor}
  };

  struct VerifyNumberOfExternalScenes {
    VerifyNumberOfExternalScenes() { assert(externalScenes.size() == numberOfExternalScenes); }
  };

  VerifyNumberOfExternalScenes verifyNumberOfExternalScenes;
}

const PrismSceneManager::CreateSpawnedScene PrismSceneManager::createSpawnedScene[scenes::numberOfExternalScenes] = {
  ::scenes::NewScene::createSpawnedScene
};

const PrismSceneManager::CreateSpawnedSceneHandlers PrismSceneManager::createSpawnedSceneHandlers[scenes::numberOfExternalScenes] = {
  static_cast<CreateSpawnedSceneHandlers>(::scenes::NewScene::createSpawnedSceneHandlers)
};

