// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 1

#include <SceneDescriptor.h>
#include <SpawnedSceneBase.h>
#include <NewScene/NewScene.h>

namespace scenes {

  namespace NewScene {

    SpawnedScene::SpawnedScene(const SceneDescriptor& sceneDescriptor, lumin::Node* root)
    : SpawnedSceneBase(sceneDescriptor, root) {
      InitialTarget = lumin::Text2dNode::CastFrom(root->findChild(externalNodes::InitialTarget));
      FinalTarget = lumin::Text2dNode::CastFrom(root->findChild(externalNodes::FinalTarget));
      Distance = lumin::Text2dNode::CastFrom(root->findChild(externalNodes::Distance));
      Laser = lumin::ModelNode::CastFrom(root->findChild(externalNodes::Laser));
      TargetingModel = lumin::ModelNode::CastFrom(root->findChild(externalNodes::TargetingModel));
    }

    SpawnedScene::~SpawnedScene() {
    }

    SpawnedSceneBase* createSpawnedScene(const SceneDescriptor& sceneDescriptor, lumin::Node* root) {
      using namespace externalNodes;
      SpawnedScene* spawnedScene = new SpawnedScene(sceneDescriptor, root);
      return spawnedScene;
    }

    class Handlers : public SpawnedSceneHandlers
    {
    public:
      Handlers(SpawnedScene& ss);

    private:

      struct InitialTargetHandlers {
        InitialTargetHandlers(SpawnedScene& ss);
      };
      InitialTargetHandlers InitialTargetHandlers_;
      struct FinalTargetHandlers {
        FinalTargetHandlers(SpawnedScene& ss);
      };
      FinalTargetHandlers FinalTargetHandlers_;
      struct DistanceHandlers {
        DistanceHandlers(SpawnedScene& ss);
      };
      DistanceHandlers DistanceHandlers_;
      struct LaserHandlers {
        LaserHandlers(SpawnedScene& ss);
      };
      LaserHandlers LaserHandlers_;
      struct TargetingModelHandlers {
        TargetingModelHandlers(SpawnedScene& ss);
      };
      TargetingModelHandlers TargetingModelHandlers_;
    };
    
    Handlers::InitialTargetHandlers::InitialTargetHandlers(SpawnedScene& ss)
      {
    }
    Handlers::FinalTargetHandlers::FinalTargetHandlers(SpawnedScene& ss)
      {
    }
    Handlers::DistanceHandlers::DistanceHandlers(SpawnedScene& ss)
      {
    }
    Handlers::LaserHandlers::LaserHandlers(SpawnedScene& ss)
      {
    }
    Handlers::TargetingModelHandlers::TargetingModelHandlers(SpawnedScene& ss)
      {
    }
    
    Handlers::Handlers(SpawnedScene& ss)
    : SpawnedSceneHandlers(ss),
      InitialTargetHandlers_(ss),
      FinalTargetHandlers_(ss),
      DistanceHandlers_(ss),
      LaserHandlers_(ss),
      TargetingModelHandlers_(ss)
      {
    }
    
    SpawnedSceneHandlers* createSpawnedSceneHandlers(SpawnedSceneBase& ssb) {
      return new Handlers(static_cast<SpawnedScene&>(ssb));
    }
  }
}

